/**
 * =====================================================
 * ENHANCED CONTROLS - COMPONENTE MODULAR DE CONTROLES VR
 * =====================================================
 * 
 * DESCRI√á√ÉO:
 * Componente A-Frame extens√≠vel para controles aprimorados em ambientes VR.
 * Projetado para f√°cil expans√£o futura com novos tipos de movimento.
 * 
 * VERS√ÉO: 1.0.0
 * DATA: 2025-10-15
 * AUTOR: Zonas 11 Project
 * 
 * =====================================================
 * FUNCIONALIDADES IMPLEMENTADAS
 * =====================================================
 * 
 * ‚úÖ ROTA√á√ÉO (Q/E):
 *    - Tecla Q/q: Rota√ß√£o anti-hor√°ria (esquerda)
 *    - Tecla E/e: Rota√ß√£o hor√°ria (direita)
 *    - Velocidade configur√°vel
 *    - Suporte mai√∫scula/min√∫scula
 * 
 * üîÆ PREPARADO PARA FUTURO:
 *    - Correr (Shift + WASD)
 *    - Pular (Espa√ßo)
 *    - Agachar (Ctrl/C)
 *    - Sprint toggle
 *    - Voo (modo criativo)
 * 
 * =====================================================
 * USO
 * =====================================================
 * 
 * HTML:
 * <a-entity camera look-controls wasd-controls 
 *           enhanced-controls="rotationSpeed: 45; enableRotation: true">
 * </a-entity>
 * 
 * PAR√ÇMETROS:
 * - enableRotation: true/false (padr√£o: true)
 * - rotationSpeed: graus/segundo (padr√£o: 45)
 * - enableRun: true/false (padr√£o: false) [FUTURO]
 * - enableJump: true/false (padr√£o: false) [FUTURO]
 * - runMultiplier: multiplicador velocidade (padr√£o: 2) [FUTURO]
 * - jumpHeight: altura do pulo em metros (padr√£o: 1.5) [FUTURO]
 * 
 * =====================================================
 * ARQUITETURA MODULAR
 * =====================================================
 * 
 * O componente √© dividido em m√≥dulos independentes:
 * 
 * 1. init()           - Inicializa√ß√£o e setup
 * 2. setupRotation()  - Configura√ß√£o rota√ß√£o Q/E
 * 3. setupRun()       - [FUTURO] Configura√ß√£o corrida
 * 4. setupJump()      - [FUTURO] Configura√ß√£o pulo
 * 5. tick()           - Loop de atualiza√ß√£o cont√≠nua
 * 6. updateRotation() - Aplicar rota√ß√£o suave
 * 7. remove()         - Limpeza de event listeners
 * 
 * Cada m√≥dulo pode ser ativado/desativado independentemente
 * via par√¢metros do schema.
 * 
 * =====================================================
 */

AFRAME.registerComponent('enhanced-controls', {
  /**
   * =====================================================
   * SCHEMA - CONFIGURA√á√ÉO DO COMPONENTE
   * =====================================================
   * 
   * Define todos os par√¢metros configur√°veis.
   * Novos recursos devem adicionar seus par√¢metros aqui.
   */
  schema: {
    // ===== ROTA√á√ÉO (Q/E) - IMPLEMENTADO =====
    enableRotation: { 
      type: 'boolean', 
      default: true,
      description: 'Ativa/desativa rota√ß√£o com Q/E'
    },
    rotationSpeed: { 
      type: 'number', 
      default: 45,
      description: 'Velocidade de rota√ß√£o em graus/segundo'
    },
    
    // ===== MOVIMENTO (WASD) - IMPLEMENTADO =====
    enableMovement: {
      type: 'boolean',
      default: true,
      description: 'Ativa/desativa movimento WASD relativo √† rota√ß√£o'
    },
    moveSpeed: {
      type: 'number',
      default: 3,
      description: 'Velocidade de movimento em m/s'
    },
    
    // ===== MOVIMENTO COM MOUSE (DRAG) - IMPLEMENTADO =====
    enableMouseDrag: {
      type: 'boolean',
      default: true,
      description: 'Ativa/desativa movimento com bot√£o direito do mouse'
    },
    mouseDragSpeed: {
      type: 'number',
      default: 0.01,
      description: 'Sensibilidade do movimento com mouse (multiplicador)'
    },
    
    // ===== CORRIDA (SHIFT) - PREPARADO PARA FUTURO =====
    enableRun: { 
      type: 'boolean', 
      default: false,
      description: '[FUTURO] Ativa/desativa corrida com Shift'
    },
    runMultiplier: { 
      type: 'number', 
      default: 2.0,
      description: '[FUTURO] Multiplicador de velocidade ao correr'
    },
    
    // ===== PULO (SPACE) - PREPARADO PARA FUTURO =====
    enableJump: { 
      type: 'boolean', 
      default: false,
      description: '[FUTURO] Ativa/desativa pulo com Espa√ßo'
    },
    jumpHeight: { 
      type: 'number', 
      default: 1.5,
      description: '[FUTURO] Altura do pulo em metros'
    },
    jumpDuration: { 
      type: 'number', 
      default: 400,
      description: '[FUTURO] Dura√ß√£o do pulo em milissegundos'
    },
    
    // ===== AGACHAR (CTRL/C) - PREPARADO PARA FUTURO =====
    enableCrouch: { 
      type: 'boolean', 
      default: false,
      description: '[FUTURO] Ativa/desativa agachar com Ctrl/C'
    },
    crouchHeight: { 
      type: 'number', 
      default: 0.8,
      description: '[FUTURO] Altura ao agachar (0-1 = porcentagem)'
    }
  },

  /**
   * =====================================================
   * INIT - INICIALIZA√á√ÉO DO COMPONENTE
   * =====================================================
   * 
   * Executado uma vez quando o componente √© anexado.
   * Configura estado inicial e chama setup de cada m√≥dulo.
   */
  init: function () {
    console.log('üéÆ Enhanced Controls: Inicializando...');
    
    // Refer√™ncia √† entidade (geralmente a c√¢mera)
    this.el = this.el;
    
    // Estado interno do componente
    this.state = {
      // Rota√ß√£o (Q/E)
      rotatingLeft: false,      // Tecla Q pressionada?
      rotatingRight: false,     // Tecla E pressionada?
      currentRotation: 0,       // Rota√ß√£o acumulada em Y
      
      // Movimento (WASD)
      movingForward: false,     // Tecla W pressionada?
      movingBackward: false,    // Tecla S pressionada?
      movingLeft: false,        // Tecla A pressionada?
      movingRight: false,       // Tecla D pressionada?
      
      // Movimento com Mouse (Drag)
      isDragging: false,        // Bot√£o pressionado?
      dragButton: null,         // Qual bot√£o? (0=esquerdo, 2=direito)
      lastMouseX: 0,            // Posi√ß√£o X anterior do mouse
      lastMouseY: 0,            // Posi√ß√£o Y anterior do mouse
      
      // Corrida (SHIFT) - FUTURO
      isRunning: false,         // Shift pressionado?
      
      // Pulo (SPACE) - FUTURO
      isJumping: false,         // No ar?
      jumpStartTime: 0,         // Timestamp in√≠cio do pulo
      initialHeight: 0,         // Altura antes do pulo
      
      // Agachar (CTRL) - FUTURO
      isCrouching: false        // Agachado?
    };
    
    // Bind de fun√ß√µes (necess√°rio para removeEventListener)
    this.onKeyDown = this.onKeyDown.bind(this);
    this.onKeyUp = this.onKeyUp.bind(this);
    this.onMouseDown = this.onMouseDown.bind(this);
    this.onMouseMove = this.onMouseMove.bind(this);
    this.onMouseUp = this.onMouseUp.bind(this);
    
    // Configurar m√≥dulos ativos
    if (this.data.enableRotation) {
      this.setupRotation();
    }
    
    if (this.data.enableMovement) {
      this.setupMovement();
    }
    
    if (this.data.enableMouseDrag) {
      this.setupMouseDrag();
    }
    
    // M√≥dulos futuros (comentados at√© implementa√ß√£o)
    // if (this.data.enableRun) {
    //   this.setupRun();
    // }
    // if (this.data.enableJump) {
    //   this.setupJump();
    // }
    // if (this.data.enableCrouch) {
    //   this.setupCrouch();
    // }
    
    console.log('‚úÖ Enhanced Controls: Inicializado com sucesso');
    console.log('üìã Configura√ß√£o:', {
      rota√ß√£o: this.data.enableRotation ? `${this.data.rotationSpeed}¬∞/s` : 'desativada',
      corrida: this.data.enableRun ? 'ativada (FUTURO)' : 'desativada',
      pulo: this.data.enableJump ? 'ativado (FUTURO)' : 'desativado'
    });
  },

  /**
   * =====================================================
   * SETUP ROTATION - CONFIGURA√á√ÉO DO M√ìDULO DE ROTA√á√ÉO
   * =====================================================
   * 
   * Configura event listeners para teclas Q e E.
   * Suporta mai√∫sculas e min√∫sculas.
   */
  setupRotation: function () {
    console.log('üîÑ Enhanced Controls: Configurando rota√ß√£o Q/E');
    
    // Adicionar event listeners globais
    window.addEventListener('keydown', this.onKeyDown);
    window.addEventListener('keyup', this.onKeyUp);
    
    // Obter rota√ß√£o inicial da c√¢mera
    const rotation = this.el.getAttribute('rotation');
    if (rotation) {
      this.state.currentRotation = rotation.y || 0;
    }
    
    console.log('‚úÖ Rota√ß√£o configurada: Q (esquerda) | E (direita)');
  },
  
  /**
   * =====================================================
   * SETUP MOVEMENT - CONFIGURA√á√ÉO DO M√ìDULO DE MOVIMENTO
   * =====================================================
   * 
   * Desativa wasd-controls padr√£o e configura movimento custom.
   * Movimento √© relativo √† rota√ß√£o Y da c√¢mera.
   */
  setupMovement: function () {
    console.log('üéÆ Enhanced Controls: Configurando movimento WASD relativo');
    
    // Desativar wasd-controls padr√£o (usa coordenadas globais)
    this.el.removeAttribute('wasd-controls');
    
    console.log('‚úÖ Movimento configurado: WASD relativo √† rota√ß√£o');
    console.log('‚ö†Ô∏è wasd-controls padr√£o desativado (usando movimento custom)');
  },
  
  /**
   * =====================================================
   * SETUP MOUSE DRAG - CONFIGURA√á√ÉO DE MOVIMENTO COM MOUSE
   * =====================================================
   * 
   * Configura event listeners para movimento com bot√£o direito do mouse.
   * Permite arrastar para mover a c√¢mera no plano XZ.
   */
  setupMouseDrag: function () {
    console.log('üñòÔ∏è Enhanced Controls: Configurando movimento com mouse');
    
    // Obter refer√™ncia ao canvas da cena
    this.canvas = this.el.sceneEl.canvas;
    
    if (!this.canvas) {
      console.error('‚ùå Canvas n√£o encontrado! Mouse drag n√£o funcionar√°.');
      return;
    }
    
    console.log('‚úÖ Canvas encontrado:', this.canvas);
    
    // Adicionar event listeners DIRETAMENTE no canvas (prioridade m√°xima)
    this.canvas.addEventListener('mousedown', this.onMouseDown, { capture: true });
    this.canvas.addEventListener('mousemove', this.onMouseMove, { capture: true });
    this.canvas.addEventListener('mouseup', this.onMouseUp, { capture: true });
    
    // Prevenir menu de contexto DIRETAMENTE no canvas
    this.canvas.addEventListener('contextmenu', (e) => {
      e.preventDefault();
      e.stopPropagation();
    }, { capture: true });
    
    console.log('‚úÖ Movimento com mouse configurado:');
    console.log('   - Bot√£o ESQUERDO: Rota√ß√£o Y (horizontal) + Pitch (vertical)');
    console.log('   - Bot√£o DIREITO: Movimento frente/tr√°s (vertical)');
    console.log('‚ö†Ô∏è Listeners registrados com {capture: true} para prioridade m√°xima');
  },
  
  /**
   * =====================================================
   * ON MOUSE DOWN - DETEC√á√ÉO DE CLIQUE DO MOUSE
   * =====================================================
   * 
   * Inicia drag quando qualquer bot√£o √© pressionado.
   */
  onMouseDown: function (event) {
    console.log(`üñòÔ∏è onMouseDown chamado! Bot√£o: ${event.button}`);
    
    // Bot√£o esquerdo (0) OU direito (2) = iniciar drag
    if (event.button === 0 || event.button === 2) {
      this.state.isDragging = true;
      this.state.dragButton = event.button; // Armazenar qual bot√£o foi pressionado
      this.state.lastMouseX = event.clientX;
      this.state.lastMouseY = event.clientY;
      
      // Prevenir comportamento padr√£o apenas para bot√£o direito
      if (event.button === 2) {
        event.preventDefault();
        event.stopPropagation();
      }
      
      const buttonName = event.button === 0 ? 'ESQUERDO' : 'DIREITO';
      console.log(`‚úÖ Drag INICIADO (${buttonName}) em:`, event.clientX, event.clientY);
      console.log('üéØ Estado isDragging:', this.state.isDragging);
    }
  },
  
  /**
   * =====================================================
   * ON MOUSE MOVE - MOVIMENTO DO MOUSE
   * =====================================================
   * 
   * Aplica a√ß√µes baseadas no bot√£o pressionado:
   * - Bot√£o ESQUERDO: Rota√ß√£o Y (horizontal) + Pitch via look-controls (vertical)
   * - Bot√£o DIREITO: Movimento frente/tr√°s (vertical)
   */
  onMouseMove: function (event) {
    if (!this.state.isDragging) return;
    
    // Calcular delta do mouse
    const deltaX = event.clientX - this.state.lastMouseX;
    const deltaY = event.clientY - this.state.lastMouseY;
    
    const buttonName = this.state.dragButton === 0 ? 'ESQUERDO' : 'DIREITO';
    console.log(`üñòÔ∏è Mouse delta (${buttonName}): X=${deltaX}, Y=${deltaY}`);
    
    // ===== BOT√ÉO ESQUERDO (0): ROTA√á√ÉO Y + PITCH =====
    if (this.state.dragButton === 0) {
      // HORIZONTAL = Rota√ß√£o Y (substituindo yaw do look-controls)
      if (Math.abs(deltaX) > 0) {
        const rotationSensitivity = 0.3;
        const rotationDelta = -deltaX * rotationSensitivity;
        
        this.state.currentRotation += rotationDelta;
        
        // Normalizar rota√ß√£o (0-360)
        this.state.currentRotation = this.state.currentRotation % 360;
        if (this.state.currentRotation < 0) {
          this.state.currentRotation += 360;
        }
        
        // Aplicar rota√ß√£o Y (yaw)
        const rotation = this.el.getAttribute('rotation');
        this.el.setAttribute('rotation', {
          x: rotation.x,                    // Pitch (look-controls mant√©m)
          y: this.state.currentRotation,    // Yaw (enhanced-controls)
          z: rotation.z
        });
        
        console.log(`üîÑ Rota√ß√£o Y: ${this.state.currentRotation.toFixed(1)}¬∞`);
      }
      
      // VERTICAL: Deixar look-controls gerenciar pitch (n√£o interferir)
      // Look-controls j√° aplica pitch automaticamente
    }
    
    // ===== BOT√ÉO DIREITO (2): MOVIMENTO FRENTE/TR√ÅS =====
    else if (this.state.dragButton === 2) {
      // Prevenir look-controls de interferir
      event.preventDefault();
      event.stopPropagation();
      
      // VERTICAL = Movimento frontal (W/S)
      if (Math.abs(deltaY) > 0) {
        const position = this.el.getAttribute('position');
        const rotationRad = THREE.MathUtils.degToRad(this.state.currentRotation);
        
        const forwardX = Math.sin(rotationRad);
        const forwardZ = Math.cos(rotationRad);
        
        const movementSensitivity = this.data.mouseDragSpeed;
        const moveX = -forwardX * deltaY * movementSensitivity;
        const moveZ = -forwardZ * deltaY * movementSensitivity;
        
        this.el.setAttribute('position', {
          x: position.x + moveX,
          y: position.y,
          z: position.z + moveZ
        });
        
        console.log(`‚û°Ô∏è Movimento: X=${moveX.toFixed(3)}, Z=${moveZ.toFixed(3)}`);
      }
    }
    
    // Atualizar posi√ß√£o anterior do mouse
    this.state.lastMouseX = event.clientX;
    this.state.lastMouseY = event.clientY;
  },
  
  /**
   * =====================================================
   * ON MOUSE UP - SOLTAR BOT√ÉO DO MOUSE
   * =====================================================
   * 
   * Finaliza drag quando qualquer bot√£o √© solto.
   */
  onMouseUp: function (event) {
    console.log(`üñòÔ∏è onMouseUp chamado! Bot√£o: ${event.button}`);
    
    // Qualquer bot√£o (0 ou 2)
    if (event.button === 0 || event.button === 2) {
      this.state.isDragging = false;
      const buttonName = event.button === 0 ? 'ESQUERDO' : 'DIREITO';
      console.log(`‚úÖ Drag FINALIZADO (${buttonName})`);
      console.log('üéØ Estado isDragging:', this.state.isDragging);
    }
  },

  /**
   * =====================================================
   * ON KEY DOWN - DETEC√á√ÉO DE TECLA PRESSIONADA
   * =====================================================
   * 
   * Chamado quando qualquer tecla √© pressionada.
   * Atualiza o estado do componente conforme a tecla.
   */
  onKeyDown: function (event) {
    // Prevenir a√ß√µes repetidas (keydown cont√≠nuo)
    if (event.repeat) return;
    
    const key = event.key.toLowerCase();
    
    // ===== ROTA√á√ÉO (Q/E) =====
    if (this.data.enableRotation) {
      if (key === 'q') {
        this.state.rotatingLeft = true;
        console.log('‚¨ÖÔ∏è Rota√ß√£o esquerda ativada');
      } else if (key === 'e') {
        this.state.rotatingRight = true;
        console.log('‚û°Ô∏è Rota√ß√£o direita ativada');
      }
    }
    
    // ===== MOVIMENTO (WASD) =====
    if (this.data.enableMovement) {
      if (key === 'w') {
        this.state.movingForward = true;
      } else if (key === 's') {
        this.state.movingBackward = true;
      } else if (key === 'a') {
        this.state.movingLeft = true;
      } else if (key === 'd') {
        this.state.movingRight = true;
      }
    }
    
    // ===== CORRIDA (SHIFT) - FUTURO =====
    // if (this.data.enableRun && event.shiftKey) {
    //   this.state.isRunning = true;
    //   console.log('üèÉ Corrida ativada');
    // }
    
    // ===== PULO (SPACE) - FUTURO =====
    // if (this.data.enableJump && key === ' ') {
    //   if (!this.state.isJumping) {
    //     this.startJump();
    //   }
    // }
    
    // ===== AGACHAR (CTRL/C) - FUTURO =====
    // if (this.data.enableCrouch && (event.ctrlKey || key === 'c')) {
    //   this.state.isCrouching = true;
    //   console.log('üßé Agachado');
    // }
  },

  /**
   * =====================================================
   * ON KEY UP - DETEC√á√ÉO DE TECLA SOLTA
   * =====================================================
   * 
   * Chamado quando qualquer tecla √© solta.
   * Desativa o estado correspondente.
   */
  onKeyUp: function (event) {
    const key = event.key.toLowerCase();
    
    // ===== ROTA√á√ÉO (Q/E) =====
    if (this.data.enableRotation) {
      if (key === 'q') {
        this.state.rotatingLeft = false;
        console.log('‚¨ÖÔ∏è Rota√ß√£o esquerda desativada');
      } else if (key === 'e') {
        this.state.rotatingRight = false;
        console.log('‚û°Ô∏è Rota√ß√£o direita desativada');
      }
    }
    
    // ===== MOVIMENTO (WASD) =====
    if (this.data.enableMovement) {
      if (key === 'w') {
        this.state.movingForward = false;
      } else if (key === 's') {
        this.state.movingBackward = false;
      } else if (key === 'a') {
        this.state.movingLeft = false;
      } else if (key === 'd') {
        this.state.movingRight = false;
      }
    }
    
    // ===== CORRIDA (SHIFT) - FUTURO =====
    // if (this.data.enableRun && !event.shiftKey) {
    //   this.state.isRunning = false;
    //   console.log('üö∂ Corrida desativada');
    // }
    
    // ===== AGACHAR (CTRL/C) - FUTURO =====
    // if (this.data.enableCrouch && (event.ctrlKey || key === 'c')) {
    //   this.state.isCrouching = false;
    //   console.log('üßç De p√©');
    // }
  },

  /**
   * =====================================================
   * TICK - LOOP DE ATUALIZA√á√ÉO (60 FPS)
   * =====================================================
   * 
   * Executado a cada frame (~16ms a 60 FPS).
   * Aplica transforma√ß√µes suaves baseadas no estado.
   * 
   * @param {number} time - Tempo total desde in√≠cio (ms)
   * @param {number} timeDelta - Tempo desde √∫ltimo frame (ms)
   */
  tick: function (time, timeDelta) {
    // Converter timeDelta de ms para segundos
    const deltaSeconds = timeDelta / 1000;
    
    // ===== ATUALIZAR ROTA√á√ÉO =====
    if (this.data.enableRotation) {
      this.updateRotation(deltaSeconds);
    }
    
    // ===== ATUALIZAR MOVIMENTO =====
    if (this.data.enableMovement) {
      this.updateMovement(deltaSeconds);
    }
    
    // Mouse drag n√£o precisa de update no tick (usa eventos)
    
    // ===== ATUALIZAR PULO - FUTURO =====
    // if (this.data.enableJump && this.state.isJumping) {
    //   this.updateJump(time);
    // }
    
    // ===== ATUALIZAR AGACHAR - FUTURO =====
    // if (this.data.enableCrouch) {
    //   this.updateCrouch(deltaSeconds);
    // }
  },

  /**
   * =====================================================
   * UPDATE ROTATION - APLICAR ROTA√á√ÉO SUAVE
   * =====================================================
   * 
   * Calcula e aplica rota√ß√£o baseada no estado atual.
   * Usa deltaSeconds para movimento frame-independent.
   * IMPORTANTE: Sempre aplica currentRotation para manter posi√ß√£o,
   * n√£o apenas quando teclas est√£o pressionadas.
   * 
   * @param {number} deltaSeconds - Tempo desde √∫ltimo frame (s)
   */
  updateRotation: function (deltaSeconds) {
    // Calcular quanto rotacionar neste frame
    const rotationAmount = this.data.rotationSpeed * deltaSeconds;
    
    // Atualizar rota√ß√£o acumulada conforme teclas pressionadas
    if (this.state.rotatingLeft) {
      this.state.currentRotation += rotationAmount;
    }
    if (this.state.rotatingRight) {
      this.state.currentRotation -= rotationAmount;
    }
    
    // Normalizar rota√ß√£o (manter entre 0-360)
    this.state.currentRotation = this.state.currentRotation % 360;
    if (this.state.currentRotation < 0) {
      this.state.currentRotation += 360;
    }
    
    // SEMPRE aplicar rota√ß√£o √† entidade (n√£o s√≥ quando teclas pressionadas)
    // Isso mant√©m a rota√ß√£o acumulada mesmo ap√≥s soltar as teclas
    const rotation = this.el.getAttribute('rotation');
    this.el.setAttribute('rotation', {
      x: rotation.x,                    // Pitch (look-controls)
      y: this.state.currentRotation,    // Yaw (enhanced-controls) - SEMPRE APLICADO
      z: rotation.z                     // Roll (n√£o usado)
    });
  },
  
  /**
   * =====================================================
   * UPDATE MOVEMENT - APLICAR MOVIMENTO RELATIVO
   * =====================================================
   * 
   * Calcula e aplica movimento baseado na rota√ß√£o Y atual.
   * CORRE√á√ÉO: W sempre move para frente RELATIVO ao olhar,
   * n√£o em coordenadas globais.
   * 
   * @param {number} deltaSeconds - Tempo desde √∫ltimo frame (s)
   */
  updateMovement: function (deltaSeconds) {
    // Calcular dist√¢ncia a mover neste frame
    const moveDistance = this.data.moveSpeed * deltaSeconds;
    
    // Obter posi√ß√£o atual
    const position = this.el.getAttribute('position');
    
    // Converter rota√ß√£o Y para radianos (Three.js R125+)
    const rotationRad = THREE.MathUtils.degToRad(this.state.currentRotation);
    
    // Calcular vetores de dire√ß√£o baseados na rota√ß√£o atual
    // FRENTE/TR√ÅS: baseado na rota√ß√£o Y
    const forwardX = Math.sin(rotationRad);
    const forwardZ = Math.cos(rotationRad);
    
    // ESQUERDA/DIREITA: perpendicular √† dire√ß√£o frontal
    const rightX = Math.cos(rotationRad);
    const rightZ = -Math.sin(rotationRad);
    
    // Aplicar movimento baseado nas teclas pressionadas
    let deltaX = 0;
    let deltaZ = 0;
    
    if (this.state.movingForward) {
      deltaX -= forwardX * moveDistance;  // W: sempre para frente
      deltaZ -= forwardZ * moveDistance;
    }
    if (this.state.movingBackward) {
      deltaX += forwardX * moveDistance;  // S: sempre para tr√°s
      deltaZ += forwardZ * moveDistance;
    }
    if (this.state.movingLeft) {
      deltaX -= rightX * moveDistance;    // A: sempre para esquerda
      deltaZ -= rightZ * moveDistance;
    }
    if (this.state.movingRight) {
      deltaX += rightX * moveDistance;    // D: sempre para direita
      deltaZ += rightZ * moveDistance;
    }
    
    // Aplicar nova posi√ß√£o
    this.el.setAttribute('position', {
      x: position.x + deltaX,
      y: position.y,                      // Y inalterado (sem voo)
      z: position.z + deltaZ
    });
  },

  /**
   * =====================================================
   * REMOVE - LIMPEZA DO COMPONENTE
   * =====================================================
   * 
   * Executado quando o componente √© removido.
   * Remove event listeners para evitar memory leaks.
   */
  remove: function () {
    console.log('üóëÔ∏è Enhanced Controls: Removendo event listeners');
    
    // Remover event listeners de teclado
    if (this.data.enableRotation || this.data.enableMovement) {
      window.removeEventListener('keydown', this.onKeyDown);
      window.removeEventListener('keyup', this.onKeyUp);
    }
    
    // Remover event listeners de mouse do canvas
    if (this.data.enableMouseDrag && this.canvas) {
      this.canvas.removeEventListener('mousedown', this.onMouseDown, { capture: true });
      this.canvas.removeEventListener('mousemove', this.onMouseMove, { capture: true });
      this.canvas.removeEventListener('mouseup', this.onMouseUp, { capture: true });
    }
    
    console.log('‚úÖ Enhanced Controls: Removido com sucesso');
  }

  /**
   * =====================================================
   * M√âTODOS FUTUROS (PREPARADOS PARA IMPLEMENTA√á√ÉO)
   * =====================================================
   */
  
  // setupRun: function () {
  //   console.log('üèÉ Enhanced Controls: Configurando corrida');
  //   // Modificar velocidade do wasd-controls quando Shift pressionado
  // },
  
  // setupJump: function () {
  //   console.log('ü¶ò Enhanced Controls: Configurando pulo');
  //   // Configurar f√≠sica de pulo (par√°bola)
  // },
  
  // setupCrouch: function () {
  //   console.log('üßé Enhanced Controls: Configurando agachar');
  //   // Modificar altura da c√¢mera
  // },
  
  // startJump: function () {
  //   console.log('‚¨ÜÔ∏è Pulando!');
  //   this.state.isJumping = true;
  //   this.state.jumpStartTime = performance.now();
  //   const position = this.el.getAttribute('position');
  //   this.state.initialHeight = position.y;
  // },
  
  // updateJump: function (time) {
  //   // Calcular posi√ß√£o Y baseada em f√≠sica de pulo (par√°bola)
  //   const elapsed = time - this.state.jumpStartTime;
  //   const progress = elapsed / this.data.jumpDuration;
  //   
  //   if (progress >= 1) {
  //     // Pulo completo
  //     this.state.isJumping = false;
  //     const position = this.el.getAttribute('position');
  //     this.el.setAttribute('position', {
  //       x: position.x,
  //       y: this.state.initialHeight,
  //       z: position.z
  //     });
  //   } else {
  //     // Aplicar par√°bola: y = -4h(x-0.5)¬≤ + h
  //     const height = -4 * this.data.jumpHeight * Math.pow(progress - 0.5, 2) + this.data.jumpHeight;
  //     const position = this.el.getAttribute('position');
  //     this.el.setAttribute('position', {
  //       x: position.x,
  //       y: this.state.initialHeight + height,
  //       z: position.z
  //     });
  //   }
  // },
  
  // updateCrouch: function (deltaSeconds) {
  //   const position = this.el.getAttribute('position');
  //   const targetHeight = this.state.isCrouching 
  //     ? this.state.initialHeight * this.data.crouchHeight 
  //     : this.state.initialHeight;
  //   
  //   // Interpola√ß√£o suave
  //   const newHeight = position.y + (targetHeight - position.y) * deltaSeconds * 5;
  //   this.el.setAttribute('position', {
  //     x: position.x,
  //     y: newHeight,
  //     z: position.z
  //   });
  // }
});

console.log('üì¶ Enhanced Controls: Componente registrado com sucesso');
