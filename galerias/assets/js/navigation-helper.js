/**
 * =====================================================
 * NAVIGATION HELPER - SISTEMA DUAL AR/VR
 * =====================================================
 * 
 * DESCRI√á√ÉO:
 * Helper JavaScript para navega√ß√£o contextual entre galeria AR
 * e galeria VR, mantendo o contexto de origem atrav√©s de toda
 * a cadeia de navega√ß√£o.
 * 
 * VERS√ÉO: 1.0.0
 * DATA: 2025-10-15
 * AUTOR: Zonas 11 Project
 * 
 * =====================================================
 * FUNCIONALIDADES
 * =====================================================
 * 
 * ‚úÖ Detec√ß√£o autom√°tica de origem (AR ou VR)
 * ‚úÖ Propaga√ß√£o de par√¢metro ?from= em toda navega√ß√£o
 * ‚úÖ URLs din√¢micas baseadas em contexto
 * ‚úÖ Compatibilidade reversa (default: AR)
 * ‚úÖ Valida√ß√£o de par√¢metros
 * 
 * =====================================================
 * USO
 * =====================================================
 * 
 * HTML:
 * <script src="assets/js/navigation-helper.js"></script>
 * 
 * JavaScript:
 * const source = getNavigationSource();        // 'ar' ou 'vr'
 * const galleryURL = getGalleryURL();          // galeria.html ou galeria-vr.html
 * const obraURL = addSourceParam('obra1.html'); // obra1.html?from=ar ou ?from=vr
 * 
 * =====================================================
 */

/**
 * =====================================================
 * GET NAVIGATION SOURCE - DETECTAR ORIGEM
 * =====================================================
 * 
 * Obt√©m o par√¢metro 'from' da URL atual.
 * 
 * @returns {'ar'|'vr'} - Origem da navega√ß√£o
 * 
 * EXEMPLOS:
 * - URL: index2.html?from=ar  ‚Üí Retorna: 'ar'
 * - URL: index2.html?from=vr  ‚Üí Retorna: 'vr'
 * - URL: index2.html          ‚Üí Retorna: 'ar' (default)
 * 
 * COMPATIBILIDADE:
 * Se par√¢metro ausente ou inv√°lido, assume 'ar' para
 * compatibilidade com vers√£o anterior (V2.8.1).
 */
function getNavigationSource() {
  // Obter par√¢metros da URL
  const params = new URLSearchParams(window.location.search);
  const from = params.get('from');
  
  // Validar valor (apenas 'ar' ou 'vr' s√£o aceitos)
  if (from === 'ar' || from === 'vr') {
    console.log(`üìç Navigation Helper: Origem detectada ‚Üí ${from.toUpperCase()}`);
    return from;
  }
  
  // Default: AR (compatibilidade reversa)
  console.log('üìç Navigation Helper: Origem n√£o especificada, assumindo AR (default)');
  return 'ar';
}

/**
 * =====================================================
 * GET GALLERY URL - RETORNAR URL DA GALERIA
 * =====================================================
 * 
 * Retorna a URL da galeria apropriada baseada na origem.
 * 
 * @param {string|null} source - Origem manual ('ar'|'vr'), ou null para detectar
 * @returns {string} URL completa da galeria
 * 
 * EXEMPLOS:
 * - source = 'ar'  ‚Üí Retorna: 'https://.../galeria.html'
 * - source = 'vr'  ‚Üí Retorna: 'https://.../galeria-vr.html'
 * - source = null  ‚Üí Detecta automaticamente da URL
 * 
 * CONFIGURA√á√ÉO:
 * Base URL est√° hardcoded para GitHub Pages.
 * Para desenvolvimento local, modificar baseURL.
 */
function getGalleryURL(source = null) {
  // Usar source fornecido ou detectar automaticamente
  const from = source || getNavigationSource();
  
  // Base URL do projeto (GitHub Pages)
  const baseURL = 'https://rodrigorez.github.io/zonas11/galerias/';
  
  // Retornar URL apropriada
  if (from === 'vr') {
    console.log(`üîô Navigation Helper: URL galeria VR ‚Üí ${baseURL}galeria-vr.html`);
    return baseURL + 'galeria-vr.html';
  }
  
  // Default: AR
  console.log(`üîô Navigation Helper: URL galeria AR ‚Üí ${baseURL}galeria.html`);
  return baseURL + 'galeria.html';
}

/**
 * =====================================================
 * ADD SOURCE PARAM - ADICIONAR PAR√ÇMETRO √Ä URL
 * =====================================================
 * 
 * Adiciona o par√¢metro 'from=' a uma URL, preservando
 * o contexto de navega√ß√£o.
 * 
 * @param {string} url - URL base (relativa ou absoluta)
 * @param {string|null} source - Origem manual ('ar'|'vr'), ou null para detectar
 * @returns {string} URL com par√¢metro ?from=
 * 
 * EXEMPLOS:
 * - url = 'obra1.html', source = 'ar'
 *   ‚Üí Retorna: 'obra1.html?from=ar'
 * 
 * - url = 'index2.html?other=value', source = 'vr'
 *   ‚Üí Retorna: 'index2.html?other=value&from=vr'
 * 
 * - url = 'https://example.com/page', source = null (detecta 'ar')
 *   ‚Üí Retorna: 'https://example.com/page?from=ar'
 * 
 * INTELIG√äNCIA:
 * - Detecta se URL j√° tem par√¢metros (?) ‚Üí usa &
 * - Se n√£o tem par√¢metros ‚Üí usa ?
 * - Preserva par√¢metros existentes
 */
function addSourceParam(url, source = null) {
  // Usar source fornecido ou detectar automaticamente
  const from = source || getNavigationSource();
  
  // Verificar se URL j√° cont√©m par√¢metros
  if (url.includes('?')) {
    // URL j√° tem par√¢metros, usar &
    const newURL = `${url}&from=${from}`;
    console.log(`üîó Navigation Helper: Adicionado &from=${from} ‚Üí ${newURL}`);
    return newURL;
  }
  
  // URL n√£o tem par√¢metros, usar ?
  const newURL = `${url}?from=${from}`;
  console.log(`üîó Navigation Helper: Adicionado ?from=${from} ‚Üí ${newURL}`);
  return newURL;
}

/**
 * =====================================================
 * GET MUNDO URL - URL DO MUNDO COM PAR√ÇMETRO
 * =====================================================
 * 
 * Helper espec√≠fico para retornar URL de mundos VR
 * com par√¢metro de origem.
 * 
 * @param {number} mundoNum - N√∫mero do mundo (2-9)
 * @param {string|null} source - Origem manual ('ar'|'vr'), ou null para detectar
 * @returns {string} URL completa do mundo com par√¢metro
 * 
 * EXEMPLOS:
 * - mundoNum = 2, source = 'ar'
 *   ‚Üí Retorna: 'https://.../index2.html?from=ar'
 * 
 * - mundoNum = 5, source = 'vr'
 *   ‚Üí Retorna: 'https://.../index5.html?from=vr'
 * 
 * VALIDA√á√ÉO:
 * Se mundoNum inv√°lido (< 2 ou > 9), retorna null e loga erro.
 */
function getMundoURL(mundoNum, source = null) {
  // Validar n√∫mero do mundo
  if (mundoNum < 2 || mundoNum > 9) {
    console.error(`‚ùå Navigation Helper: N√∫mero de mundo inv√°lido: ${mundoNum} (deve ser 2-9)`);
    return null;
  }
  
  // Usar source fornecido ou detectar automaticamente
  const from = source || getNavigationSource();
  
  // Base URL do projeto
  const baseURL = 'https://rodrigorez.github.io/zonas11/galerias/';
  
  // Construir URL
  const mundoURL = `${baseURL}index${mundoNum}.html?from=${from}`;
  console.log(`üåç Navigation Helper: URL mundo ${mundoNum} ‚Üí ${mundoURL}`);
  
  return mundoURL;
}

/**
 * =====================================================
 * GET OBRA URL - URL DA OBRA COM PAR√ÇMETRO
 * =====================================================
 * 
 * Helper espec√≠fico para retornar URL de obras
 * com par√¢metro de origem.
 * 
 * @param {number} obraNum - N√∫mero da obra (1-55)
 * @param {string|null} source - Origem manual ('ar'|'vr'), ou null para detectar
 * @returns {string} URL completa da obra com par√¢metro
 * 
 * EXEMPLOS:
 * - obraNum = 1, source = 'ar'
 *   ‚Üí Retorna: 'https://.../obra1.html?from=ar'
 * 
 * - obraNum = 25, source = 'vr'
 *   ‚Üí Retorna: 'https://.../obra25.html?from=vr'
 * 
 * VALIDA√á√ÉO:
 * Se obraNum inv√°lido (< 1 ou > 55), retorna null e loga erro.
 */
function getObraURL(obraNum, source = null) {
  // Validar n√∫mero da obra
  if (obraNum < 1 || obraNum > 55) {
    console.error(`‚ùå Navigation Helper: N√∫mero de obra inv√°lido: ${obraNum} (deve ser 1-55)`);
    return null;
  }
  
  // Usar source fornecido ou detectar automaticamente
  const from = source || getNavigationSource();
  
  // Base URL do projeto
  const baseURL = 'https://rodrigorez.github.io/zonas11/galerias/';
  
  // Construir URL
  const obraURL = `${baseURL}obra${obraNum}.html?from=${from}`;
  console.log(`üñºÔ∏è Navigation Helper: URL obra ${obraNum} ‚Üí ${obraURL}`);
  
  return obraURL;
}

/**
 * =====================================================
 * INICIALIZA√á√ÉO
 * =====================================================
 */

// Log de carregamento
console.log('üì¶ Navigation Helper V1.0.0: Carregado com sucesso');
console.log('üìã Fun√ß√µes dispon√≠veis:');
console.log('   - getNavigationSource()');
console.log('   - getGalleryURL(source)');
console.log('   - addSourceParam(url, source)');
console.log('   - getMundoURL(mundoNum, source)');
console.log('   - getObraURL(obraNum, source)');

// Detectar e logar origem automaticamente ao carregar
const currentSource = getNavigationSource();
console.log(`‚úÖ Navigation Helper: Contexto atual ‚Üí ${currentSource.toUpperCase()}`);
